// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_fort_RCPPEXPORTS_H_GEN_
#define RCPP_fort_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace fort {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("fort", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("fort", "_fort_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in fort");
            }
        }
    }

    inline arma::vec a1_fn_ip(const arma::vec& theta, const arma::vec& known_params) {
        typedef SEXP(*Ptr_a1_fn_ip)(SEXP,SEXP);
        static Ptr_a1_fn_ip p_a1_fn_ip = NULL;
        if (p_a1_fn_ip == NULL) {
            validateSignature("arma::vec(*a1_fn_ip)(const arma::vec&,const arma::vec&)");
            p_a1_fn_ip = (Ptr_a1_fn_ip)R_GetCCallable("fort", "_fort_a1_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_a1_fn_ip(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat P1_fn_ip(const arma::vec& theta, const arma::vec& known_params) {
        typedef SEXP(*Ptr_P1_fn_ip)(SEXP,SEXP);
        static Ptr_P1_fn_ip p_P1_fn_ip = NULL;
        if (p_P1_fn_ip == NULL) {
            validateSignature("arma::mat(*P1_fn_ip)(const arma::vec&,const arma::vec&)");
            p_P1_fn_ip = (Ptr_P1_fn_ip)R_GetCCallable("fort", "_fort_P1_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_P1_fn_ip(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat H_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_H_fn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_H_fn_ip p_H_fn_ip = NULL;
        if (p_H_fn_ip == NULL) {
            validateSignature("arma::mat(*H_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_H_fn_ip = (Ptr_H_fn_ip)R_GetCCallable("fort", "_fort_H_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_H_fn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat R_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_R_fn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_R_fn_ip p_R_fn_ip = NULL;
        if (p_R_fn_ip == NULL) {
            validateSignature("arma::mat(*R_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_R_fn_ip = (Ptr_R_fn_ip)R_GetCCallable("fort", "_fort_R_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_R_fn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec Z_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_Z_fn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Z_fn_ip p_Z_fn_ip = NULL;
        if (p_Z_fn_ip == NULL) {
            validateSignature("arma::vec(*Z_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_Z_fn_ip = (Ptr_Z_fn_ip)R_GetCCallable("fort", "_fort_Z_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Z_fn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat Z_gn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_Z_gn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Z_gn_ip p_Z_gn_ip = NULL;
        if (p_Z_gn_ip == NULL) {
            validateSignature("arma::mat(*Z_gn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_Z_gn_ip = (Ptr_Z_gn_ip)R_GetCCallable("fort", "_fort_Z_gn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Z_gn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec T_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_T_fn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_T_fn_ip p_T_fn_ip = NULL;
        if (p_T_fn_ip == NULL) {
            validateSignature("arma::vec(*T_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_T_fn_ip = (Ptr_T_fn_ip)R_GetCCallable("fort", "_fort_T_fn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_T_fn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat T_gn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_T_gn_ip)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_T_gn_ip p_T_gn_ip = NULL;
        if (p_T_gn_ip == NULL) {
            validateSignature("arma::mat(*T_gn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_T_gn_ip = (Ptr_T_gn_ip)R_GetCCallable("fort", "_fort_T_gn_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_T_gn_ip(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline double log_prior_pdf_ip_HP(const arma::vec& theta, const arma::vec& hyperparms) {
        typedef SEXP(*Ptr_log_prior_pdf_ip_HP)(SEXP,SEXP);
        static Ptr_log_prior_pdf_ip_HP p_log_prior_pdf_ip_HP = NULL;
        if (p_log_prior_pdf_ip_HP == NULL) {
            validateSignature("double(*log_prior_pdf_ip_HP)(const arma::vec&,const arma::vec&)");
            p_log_prior_pdf_ip_HP = (Ptr_log_prior_pdf_ip_HP)R_GetCCallable("fort", "_fort_log_prior_pdf_ip_HP");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_prior_pdf_ip_HP(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(hyperparms)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List create_xptrs_ip(const arma::vec& hyperparms) {
        typedef SEXP(*Ptr_create_xptrs_ip)(SEXP);
        static Ptr_create_xptrs_ip p_create_xptrs_ip = NULL;
        if (p_create_xptrs_ip == NULL) {
            validateSignature("Rcpp::List(*create_xptrs_ip)(const arma::vec&)");
            p_create_xptrs_ip = (Ptr_create_xptrs_ip)R_GetCCallable("fort", "_fort_create_xptrs_ip");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_xptrs_ip(Shield<SEXP>(Rcpp::wrap(hyperparms)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::vec a1_fn(const arma::vec& theta, const arma::vec& known_params) {
        typedef SEXP(*Ptr_a1_fn)(SEXP,SEXP);
        static Ptr_a1_fn p_a1_fn = NULL;
        if (p_a1_fn == NULL) {
            validateSignature("arma::vec(*a1_fn)(const arma::vec&,const arma::vec&)");
            p_a1_fn = (Ptr_a1_fn)R_GetCCallable("fort", "_fort_a1_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_a1_fn(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat P1_fn(const arma::vec& theta, const arma::vec& known_params) {
        typedef SEXP(*Ptr_P1_fn)(SEXP,SEXP);
        static Ptr_P1_fn p_P1_fn = NULL;
        if (p_P1_fn == NULL) {
            validateSignature("arma::mat(*P1_fn)(const arma::vec&,const arma::vec&)");
            p_P1_fn = (Ptr_P1_fn)R_GetCCallable("fort", "_fort_P1_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_P1_fn(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat H_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_H_fn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_H_fn p_H_fn = NULL;
        if (p_H_fn == NULL) {
            validateSignature("arma::mat(*H_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_H_fn = (Ptr_H_fn)R_GetCCallable("fort", "_fort_H_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_H_fn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat R_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_R_fn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_R_fn p_R_fn = NULL;
        if (p_R_fn == NULL) {
            validateSignature("arma::mat(*R_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_R_fn = (Ptr_R_fn)R_GetCCallable("fort", "_fort_R_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_R_fn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec Z_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_Z_fn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Z_fn p_Z_fn = NULL;
        if (p_Z_fn == NULL) {
            validateSignature("arma::vec(*Z_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_Z_fn = (Ptr_Z_fn)R_GetCCallable("fort", "_fort_Z_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Z_fn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat Z_gn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_Z_gn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Z_gn p_Z_gn = NULL;
        if (p_Z_gn == NULL) {
            validateSignature("arma::mat(*Z_gn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_Z_gn = (Ptr_Z_gn)R_GetCCallable("fort", "_fort_Z_gn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Z_gn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec T_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_T_fn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_T_fn p_T_fn = NULL;
        if (p_T_fn == NULL) {
            validateSignature("arma::vec(*T_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_T_fn = (Ptr_T_fn)R_GetCCallable("fort", "_fort_T_fn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_T_fn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat T_gn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params) {
        typedef SEXP(*Ptr_T_gn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_T_gn p_T_gn = NULL;
        if (p_T_gn == NULL) {
            validateSignature("arma::mat(*T_gn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
            p_T_gn = (Ptr_T_gn)R_GetCCallable("fort", "_fort_T_gn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_T_gn(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(known_params)), Shield<SEXP>(Rcpp::wrap(known_tv_params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline double log_prior_pdf(const arma::vec& theta) {
        typedef SEXP(*Ptr_log_prior_pdf)(SEXP);
        static Ptr_log_prior_pdf p_log_prior_pdf = NULL;
        if (p_log_prior_pdf == NULL) {
            validateSignature("double(*log_prior_pdf)(const arma::vec&)");
            p_log_prior_pdf = (Ptr_log_prior_pdf)R_GetCCallable("fort", "_fort_log_prior_pdf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_prior_pdf(Shield<SEXP>(Rcpp::wrap(theta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List create_xptrs() {
        typedef SEXP(*Ptr_create_xptrs)();
        static Ptr_create_xptrs p_create_xptrs = NULL;
        if (p_create_xptrs == NULL) {
            validateSignature("Rcpp::List(*create_xptrs)()");
            p_create_xptrs = (Ptr_create_xptrs)R_GetCCallable("fort", "_fort_create_xptrs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_xptrs();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_fort_RCPPEXPORTS_H_GEN_
