// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fort.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// a1_fn_ip
arma::vec a1_fn_ip(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_a1_fn_ip_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(a1_fn_ip(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_a1_fn_ip(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_a1_fn_ip_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// P1_fn_ip
arma::mat P1_fn_ip(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_P1_fn_ip_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(P1_fn_ip(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_P1_fn_ip(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_P1_fn_ip_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// H_fn_ip
arma::mat H_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_H_fn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(H_fn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_H_fn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_H_fn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// R_fn_ip
arma::mat R_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_R_fn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_fn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_R_fn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_R_fn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_fn_ip
arma::vec Z_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_fn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_fn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_fn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_fn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_gn_ip
arma::mat Z_gn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_gn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_gn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_gn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_gn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_fn_ip
arma::vec T_fn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_fn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_fn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_fn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_fn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_gn_ip
arma::mat T_gn_ip(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_gn_ip_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_gn_ip(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_gn_ip(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_gn_ip_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ip4
double log_prior_pdf_ip4(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ip4_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ip4(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ip4(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ip4_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ip3
double log_prior_pdf_ip3(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ip3_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ip3(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ip3(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ip3_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ip2
double log_prior_pdf_ip2(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ip2_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ip2(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ip2(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ip2_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ip1
double log_prior_pdf_ip1(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ip1_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ip1(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ip1(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ip1_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ip0
double log_prior_pdf_ip0(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ip0_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ip0(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ip0(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ip0_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ipn1
double log_prior_pdf_ipn1(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ipn1_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ipn1(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ipn1(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ipn1_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ipn2
double log_prior_pdf_ipn2(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ipn2_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ipn2(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ipn2(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ipn2_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ipn3
double log_prior_pdf_ipn3(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ipn3_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ipn3(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ipn3(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ipn3_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf_ipn4
double log_prior_pdf_ipn4(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_ipn4_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf_ipn4(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf_ipn4(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_ipn4_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_xptrs_ip_all
Rcpp::List create_xptrs_ip_all();
static SEXP _fort_create_xptrs_ip_all_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(create_xptrs_ip_all());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_create_xptrs_ip_all() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_create_xptrs_ip_all_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logsumexp
double logsumexp(double logA, double logB);
static SEXP _fort_logsumexp_try(SEXP logASEXP, SEXP logBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type logA(logASEXP);
    Rcpp::traits::input_parameter< double >::type logB(logBSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(logA, logB));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_logsumexp(SEXP logASEXP, SEXP logBSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_logsumexp_try(logASEXP, logBSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// a1_fn_ipH
arma::vec a1_fn_ipH(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_a1_fn_ipH_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(a1_fn_ipH(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_a1_fn_ipH(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_a1_fn_ipH_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// P1_fn_ipH
arma::mat P1_fn_ipH(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_P1_fn_ipH_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(P1_fn_ipH(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_P1_fn_ipH(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_P1_fn_ipH_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// H_fn_ipH
arma::mat H_fn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_H_fn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(H_fn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_H_fn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_H_fn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_fn_ipH
arma::vec Z_fn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_fn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_fn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_fn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_fn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_gn_ipH
arma::mat Z_gn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_gn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_gn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_gn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_gn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// R_fn_ipH
arma::mat R_fn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_R_fn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_fn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_R_fn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_R_fn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_fn_ipH
arma::vec T_fn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_fn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_fn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_fn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_fn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_gn_ipH
arma::mat T_gn_ipH(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_gn_ipH_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_gn_ipH(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_gn_ipH(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_gn_ipH_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_xptrs_H_all
Rcpp::List create_xptrs_H_all();
static SEXP _fort_create_xptrs_H_all_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(create_xptrs_H_all());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_create_xptrs_H_all() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_create_xptrs_H_all_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// a1_fn
arma::vec a1_fn(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_a1_fn_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(a1_fn(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_a1_fn(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_a1_fn_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// P1_fn
arma::mat P1_fn(const arma::vec& theta, const arma::vec& known_params);
static SEXP _fort_P1_fn_try(SEXP thetaSEXP, SEXP known_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(P1_fn(theta, known_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_P1_fn(SEXP thetaSEXP, SEXP known_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_P1_fn_try(thetaSEXP, known_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// H_fn
arma::mat H_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_H_fn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(H_fn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_H_fn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_H_fn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// R_fn
arma::mat R_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_R_fn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_fn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_R_fn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_R_fn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_fn
arma::vec Z_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_fn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_fn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_fn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_fn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Z_gn
arma::mat Z_gn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_Z_gn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_gn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_Z_gn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_Z_gn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_fn
arma::vec T_fn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_fn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_fn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_fn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_fn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// T_gn
arma::mat T_gn(const unsigned int t, const arma::vec& alpha, const arma::vec& theta, const arma::vec& known_params, const arma::mat& known_tv_params);
static SEXP _fort_T_gn_try(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(T_gn(t, alpha, theta, known_params, known_tv_params));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_T_gn(SEXP tSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_T_gn_try(tSEXP, alphaSEXP, thetaSEXP, known_paramsSEXP, known_tv_paramsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_prior_pdf
double log_prior_pdf(const arma::vec& theta);
static SEXP _fort_log_prior_pdf_try(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prior_pdf(theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_log_prior_pdf(SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_log_prior_pdf_try(thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_xptrs
Rcpp::List create_xptrs();
static SEXP _fort_create_xptrs_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(create_xptrs());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fort_create_xptrs() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fort_create_xptrs_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _fort_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*a1_fn_ip)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*P1_fn_ip)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*H_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*R_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*Z_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*Z_gn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*T_fn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*T_gn_ip)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("double(*log_prior_pdf_ip4)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ip3)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ip2)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ip1)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ip0)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ipn1)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ipn2)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ipn3)(const arma::vec&)");
        signatures.insert("double(*log_prior_pdf_ipn4)(const arma::vec&)");
        signatures.insert("Rcpp::List(*create_xptrs_ip_all)()");
        signatures.insert("double(*logsumexp)(double,double)");
        signatures.insert("arma::vec(*a1_fn_ipH)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*P1_fn_ipH)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*H_fn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*Z_fn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*Z_gn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*R_fn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*T_fn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*T_gn_ipH)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("Rcpp::List(*create_xptrs_H_all)()");
        signatures.insert("arma::vec(*a1_fn)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*P1_fn)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*H_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*R_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*Z_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*Z_gn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::vec(*T_fn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*T_gn)(const unsigned int,const arma::vec&,const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("double(*log_prior_pdf)(const arma::vec&)");
        signatures.insert("Rcpp::List(*create_xptrs)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _fort_RcppExport_registerCCallable() { 
    R_RegisterCCallable("fort", "_fort_a1_fn_ip", (DL_FUNC)_fort_a1_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_P1_fn_ip", (DL_FUNC)_fort_P1_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_H_fn_ip", (DL_FUNC)_fort_H_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_R_fn_ip", (DL_FUNC)_fort_R_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_Z_fn_ip", (DL_FUNC)_fort_Z_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_Z_gn_ip", (DL_FUNC)_fort_Z_gn_ip_try);
    R_RegisterCCallable("fort", "_fort_T_fn_ip", (DL_FUNC)_fort_T_fn_ip_try);
    R_RegisterCCallable("fort", "_fort_T_gn_ip", (DL_FUNC)_fort_T_gn_ip_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ip4", (DL_FUNC)_fort_log_prior_pdf_ip4_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ip3", (DL_FUNC)_fort_log_prior_pdf_ip3_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ip2", (DL_FUNC)_fort_log_prior_pdf_ip2_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ip1", (DL_FUNC)_fort_log_prior_pdf_ip1_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ip0", (DL_FUNC)_fort_log_prior_pdf_ip0_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ipn1", (DL_FUNC)_fort_log_prior_pdf_ipn1_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ipn2", (DL_FUNC)_fort_log_prior_pdf_ipn2_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ipn3", (DL_FUNC)_fort_log_prior_pdf_ipn3_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf_ipn4", (DL_FUNC)_fort_log_prior_pdf_ipn4_try);
    R_RegisterCCallable("fort", "_fort_create_xptrs_ip_all", (DL_FUNC)_fort_create_xptrs_ip_all_try);
    R_RegisterCCallable("fort", "_fort_logsumexp", (DL_FUNC)_fort_logsumexp_try);
    R_RegisterCCallable("fort", "_fort_a1_fn_ipH", (DL_FUNC)_fort_a1_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_P1_fn_ipH", (DL_FUNC)_fort_P1_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_H_fn_ipH", (DL_FUNC)_fort_H_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_Z_fn_ipH", (DL_FUNC)_fort_Z_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_Z_gn_ipH", (DL_FUNC)_fort_Z_gn_ipH_try);
    R_RegisterCCallable("fort", "_fort_R_fn_ipH", (DL_FUNC)_fort_R_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_T_fn_ipH", (DL_FUNC)_fort_T_fn_ipH_try);
    R_RegisterCCallable("fort", "_fort_T_gn_ipH", (DL_FUNC)_fort_T_gn_ipH_try);
    R_RegisterCCallable("fort", "_fort_create_xptrs_H_all", (DL_FUNC)_fort_create_xptrs_H_all_try);
    R_RegisterCCallable("fort", "_fort_a1_fn", (DL_FUNC)_fort_a1_fn_try);
    R_RegisterCCallable("fort", "_fort_P1_fn", (DL_FUNC)_fort_P1_fn_try);
    R_RegisterCCallable("fort", "_fort_H_fn", (DL_FUNC)_fort_H_fn_try);
    R_RegisterCCallable("fort", "_fort_R_fn", (DL_FUNC)_fort_R_fn_try);
    R_RegisterCCallable("fort", "_fort_Z_fn", (DL_FUNC)_fort_Z_fn_try);
    R_RegisterCCallable("fort", "_fort_Z_gn", (DL_FUNC)_fort_Z_gn_try);
    R_RegisterCCallable("fort", "_fort_T_fn", (DL_FUNC)_fort_T_fn_try);
    R_RegisterCCallable("fort", "_fort_T_gn", (DL_FUNC)_fort_T_gn_try);
    R_RegisterCCallable("fort", "_fort_log_prior_pdf", (DL_FUNC)_fort_log_prior_pdf_try);
    R_RegisterCCallable("fort", "_fort_create_xptrs", (DL_FUNC)_fort_create_xptrs_try);
    R_RegisterCCallable("fort", "_fort_RcppExport_validate", (DL_FUNC)_fort_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_fort_a1_fn_ip", (DL_FUNC) &_fort_a1_fn_ip, 2},
    {"_fort_P1_fn_ip", (DL_FUNC) &_fort_P1_fn_ip, 2},
    {"_fort_H_fn_ip", (DL_FUNC) &_fort_H_fn_ip, 5},
    {"_fort_R_fn_ip", (DL_FUNC) &_fort_R_fn_ip, 5},
    {"_fort_Z_fn_ip", (DL_FUNC) &_fort_Z_fn_ip, 5},
    {"_fort_Z_gn_ip", (DL_FUNC) &_fort_Z_gn_ip, 5},
    {"_fort_T_fn_ip", (DL_FUNC) &_fort_T_fn_ip, 5},
    {"_fort_T_gn_ip", (DL_FUNC) &_fort_T_gn_ip, 5},
    {"_fort_log_prior_pdf_ip4", (DL_FUNC) &_fort_log_prior_pdf_ip4, 1},
    {"_fort_log_prior_pdf_ip3", (DL_FUNC) &_fort_log_prior_pdf_ip3, 1},
    {"_fort_log_prior_pdf_ip2", (DL_FUNC) &_fort_log_prior_pdf_ip2, 1},
    {"_fort_log_prior_pdf_ip1", (DL_FUNC) &_fort_log_prior_pdf_ip1, 1},
    {"_fort_log_prior_pdf_ip0", (DL_FUNC) &_fort_log_prior_pdf_ip0, 1},
    {"_fort_log_prior_pdf_ipn1", (DL_FUNC) &_fort_log_prior_pdf_ipn1, 1},
    {"_fort_log_prior_pdf_ipn2", (DL_FUNC) &_fort_log_prior_pdf_ipn2, 1},
    {"_fort_log_prior_pdf_ipn3", (DL_FUNC) &_fort_log_prior_pdf_ipn3, 1},
    {"_fort_log_prior_pdf_ipn4", (DL_FUNC) &_fort_log_prior_pdf_ipn4, 1},
    {"_fort_create_xptrs_ip_all", (DL_FUNC) &_fort_create_xptrs_ip_all, 0},
    {"_fort_logsumexp", (DL_FUNC) &_fort_logsumexp, 2},
    {"_fort_a1_fn_ipH", (DL_FUNC) &_fort_a1_fn_ipH, 2},
    {"_fort_P1_fn_ipH", (DL_FUNC) &_fort_P1_fn_ipH, 2},
    {"_fort_H_fn_ipH", (DL_FUNC) &_fort_H_fn_ipH, 5},
    {"_fort_Z_fn_ipH", (DL_FUNC) &_fort_Z_fn_ipH, 5},
    {"_fort_Z_gn_ipH", (DL_FUNC) &_fort_Z_gn_ipH, 5},
    {"_fort_R_fn_ipH", (DL_FUNC) &_fort_R_fn_ipH, 5},
    {"_fort_T_fn_ipH", (DL_FUNC) &_fort_T_fn_ipH, 5},
    {"_fort_T_gn_ipH", (DL_FUNC) &_fort_T_gn_ipH, 5},
    {"_fort_create_xptrs_H_all", (DL_FUNC) &_fort_create_xptrs_H_all, 0},
    {"_fort_a1_fn", (DL_FUNC) &_fort_a1_fn, 2},
    {"_fort_P1_fn", (DL_FUNC) &_fort_P1_fn, 2},
    {"_fort_H_fn", (DL_FUNC) &_fort_H_fn, 5},
    {"_fort_R_fn", (DL_FUNC) &_fort_R_fn, 5},
    {"_fort_Z_fn", (DL_FUNC) &_fort_Z_fn, 5},
    {"_fort_Z_gn", (DL_FUNC) &_fort_Z_gn, 5},
    {"_fort_T_fn", (DL_FUNC) &_fort_T_fn, 5},
    {"_fort_T_gn", (DL_FUNC) &_fort_T_gn, 5},
    {"_fort_log_prior_pdf", (DL_FUNC) &_fort_log_prior_pdf, 1},
    {"_fort_create_xptrs", (DL_FUNC) &_fort_create_xptrs, 0},
    {"_fort_RcppExport_registerCCallable", (DL_FUNC) &_fort_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fort(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
